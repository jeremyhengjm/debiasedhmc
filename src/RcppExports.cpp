// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// logcosh
double logcosh(double x);
RcppExport SEXP _debiasedhmc_logcosh(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logcosh(x));
    return rcpp_result_gen;
END_RCPP
}
// gaussian_max_couplingC
NumericVector gaussian_max_couplingC(const NumericVector& mu1, const NumericVector& mu2, const NumericMatrix& Sigma1, const NumericMatrix& Sigma2);
RcppExport SEXP _debiasedhmc_gaussian_max_couplingC(SEXP mu1SEXP, SEXP mu2SEXP, SEXP Sigma1SEXP, SEXP Sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Sigma1(Sigma1SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Sigma2(Sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(gaussian_max_couplingC(mu1, mu2, Sigma1, Sigma2));
    return rcpp_result_gen;
END_RCPP
}
// gaussian_max_coupling_cholesky
NumericVector gaussian_max_coupling_cholesky(const NumericVector& mu1, const NumericVector& mu2, const Eigen::MatrixXd& Cholesky1, const Eigen::MatrixXd& Cholesky2, const Eigen::MatrixXd& Cholesky_inverse1, const Eigen::MatrixXd& Cholesky_inverse2);
RcppExport SEXP _debiasedhmc_gaussian_max_coupling_cholesky(SEXP mu1SEXP, SEXP mu2SEXP, SEXP Cholesky1SEXP, SEXP Cholesky2SEXP, SEXP Cholesky_inverse1SEXP, SEXP Cholesky_inverse2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Cholesky1(Cholesky1SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Cholesky2(Cholesky2SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Cholesky_inverse1(Cholesky_inverse1SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Cholesky_inverse2(Cholesky_inverse2SEXP);
    rcpp_result_gen = Rcpp::wrap(gaussian_max_coupling_cholesky(mu1, mu2, Cholesky1, Cholesky2, Cholesky_inverse1, Cholesky_inverse2));
    return rcpp_result_gen;
END_RCPP
}
// estimator_bin
double estimator_bin(List c_chains, int component, double lower, double upper, int k, int K);
RcppExport SEXP _debiasedhmc_estimator_bin(SEXP c_chainsSEXP, SEXP componentSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP kSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type c_chains(c_chainsSEXP);
    Rcpp::traits::input_parameter< int >::type component(componentSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(estimator_bin(c_chains, component, lower, upper, k, K));
    return rcpp_result_gen;
END_RCPP
}
// rinvgaussian_c
NumericVector rinvgaussian_c(int n, double mu, double lambda);
RcppExport SEXP _debiasedhmc_rinvgaussian_c(SEXP nSEXP, SEXP muSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(rinvgaussian_c(n, mu, lambda));
    return rcpp_result_gen;
END_RCPP
}
// rinvgaussian_coupled_c
NumericVector rinvgaussian_coupled_c(double mu1, double mu2, double lambda1, double lambda2);
RcppExport SEXP _debiasedhmc_rinvgaussian_coupled_c(SEXP mu1SEXP, SEXP mu2SEXP, SEXP lambda1SEXP, SEXP lambda2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< double >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< double >::type lambda2(lambda2SEXP);
    rcpp_result_gen = Rcpp::wrap(rinvgaussian_coupled_c(mu1, mu2, lambda1, lambda2));
    return rcpp_result_gen;
END_RCPP
}
// logistic_logtarget_c
double logistic_logtarget_c(NumericVector chain_state, const NumericVector& Y, const NumericMatrix& X, double lambda);
RcppExport SEXP _debiasedhmc_logistic_logtarget_c(SEXP chain_stateSEXP, SEXP YSEXP, SEXP XSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type chain_state(chain_stateSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(logistic_logtarget_c(chain_state, Y, X, lambda));
    return rcpp_result_gen;
END_RCPP
}
// logistic_gradlogtarget_c
NumericVector logistic_gradlogtarget_c(NumericVector chain_state, NumericVector Y, NumericMatrix X, double lambda);
RcppExport SEXP _debiasedhmc_logistic_gradlogtarget_c(SEXP chain_stateSEXP, SEXP YSEXP, SEXP XSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type chain_state(chain_stateSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(logistic_gradlogtarget_c(chain_state, Y, X, lambda));
    return rcpp_result_gen;
END_RCPP
}
// rmvnorm
NumericMatrix rmvnorm(int nsamples, const NumericVector& mean, const NumericMatrix& covariance);
RcppExport SEXP _debiasedhmc_rmvnorm(SEXP nsamplesSEXP, SEXP meanSEXP, SEXP covarianceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nsamples(nsamplesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type covariance(covarianceSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnorm(nsamples, mean, covariance));
    return rcpp_result_gen;
END_RCPP
}
// rmvnorm_cholesky
NumericMatrix rmvnorm_cholesky(int nsamples, const NumericVector& mean, const Eigen::MatrixXd& cholesky);
RcppExport SEXP _debiasedhmc_rmvnorm_cholesky(SEXP nsamplesSEXP, SEXP meanSEXP, SEXP choleskySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nsamples(nsamplesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type cholesky(choleskySEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnorm_cholesky(nsamples, mean, cholesky));
    return rcpp_result_gen;
END_RCPP
}
// dmvnorm
NumericVector dmvnorm(const NumericMatrix& x, const NumericVector& mean, const NumericMatrix& covariance);
RcppExport SEXP _debiasedhmc_dmvnorm(SEXP xSEXP, SEXP meanSEXP, SEXP covarianceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type covariance(covarianceSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnorm(x, mean, covariance));
    return rcpp_result_gen;
END_RCPP
}
// dmvnorm_cholesky_inverse
NumericVector dmvnorm_cholesky_inverse(const NumericMatrix& x, const NumericVector& mean, const Eigen::MatrixXd& cholesky_inverse);
RcppExport SEXP _debiasedhmc_dmvnorm_cholesky_inverse(SEXP xSEXP, SEXP meanSEXP, SEXP cholesky_inverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type cholesky_inverse(cholesky_inverseSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnorm_cholesky_inverse(x, mean, cholesky_inverse));
    return rcpp_result_gen;
END_RCPP
}
// rtmg
NumericMatrix rtmg(int n_, int seed_, NumericVector initial_, int numlin_, NumericMatrix F_, NumericVector g_, int numquad_, NumericMatrix quadratics_);
RcppExport SEXP _debiasedhmc_rtmg(SEXP n_SEXP, SEXP seed_SEXP, SEXP initial_SEXP, SEXP numlin_SEXP, SEXP F_SEXP, SEXP g_SEXP, SEXP numquad_SEXP, SEXP quadratics_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_(n_SEXP);
    Rcpp::traits::input_parameter< int >::type seed_(seed_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initial_(initial_SEXP);
    Rcpp::traits::input_parameter< int >::type numlin_(numlin_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type F_(F_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type g_(g_SEXP);
    Rcpp::traits::input_parameter< int >::type numquad_(numquad_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type quadratics_(quadratics_SEXP);
    rcpp_result_gen = Rcpp::wrap(rtmg(n_, seed_, initial_, numlin_, F_, g_, numquad_, quadratics_));
    return rcpp_result_gen;
END_RCPP
}
// rtmg_coupled
List rtmg_coupled(int n_, int seed_, NumericVector initial_1, NumericVector initial_2, int numlin_, NumericMatrix F_, NumericVector g_, int numquad_, NumericMatrix quadratics_);
RcppExport SEXP _debiasedhmc_rtmg_coupled(SEXP n_SEXP, SEXP seed_SEXP, SEXP initial_1SEXP, SEXP initial_2SEXP, SEXP numlin_SEXP, SEXP F_SEXP, SEXP g_SEXP, SEXP numquad_SEXP, SEXP quadratics_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_(n_SEXP);
    Rcpp::traits::input_parameter< int >::type seed_(seed_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initial_1(initial_1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initial_2(initial_2SEXP);
    Rcpp::traits::input_parameter< int >::type numlin_(numlin_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type F_(F_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type g_(g_SEXP);
    Rcpp::traits::input_parameter< int >::type numquad_(numquad_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type quadratics_(quadratics_SEXP);
    rcpp_result_gen = Rcpp::wrap(rtmg_coupled(n_, seed_, initial_1, initial_2, numlin_, F_, g_, numquad_, quadratics_));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_debiasedhmc_logcosh", (DL_FUNC) &_debiasedhmc_logcosh, 1},
    {"_debiasedhmc_gaussian_max_couplingC", (DL_FUNC) &_debiasedhmc_gaussian_max_couplingC, 4},
    {"_debiasedhmc_gaussian_max_coupling_cholesky", (DL_FUNC) &_debiasedhmc_gaussian_max_coupling_cholesky, 6},
    {"_debiasedhmc_estimator_bin", (DL_FUNC) &_debiasedhmc_estimator_bin, 6},
    {"_debiasedhmc_rinvgaussian_c", (DL_FUNC) &_debiasedhmc_rinvgaussian_c, 3},
    {"_debiasedhmc_rinvgaussian_coupled_c", (DL_FUNC) &_debiasedhmc_rinvgaussian_coupled_c, 4},
    {"_debiasedhmc_logistic_logtarget_c", (DL_FUNC) &_debiasedhmc_logistic_logtarget_c, 4},
    {"_debiasedhmc_logistic_gradlogtarget_c", (DL_FUNC) &_debiasedhmc_logistic_gradlogtarget_c, 4},
    {"_debiasedhmc_rmvnorm", (DL_FUNC) &_debiasedhmc_rmvnorm, 3},
    {"_debiasedhmc_rmvnorm_cholesky", (DL_FUNC) &_debiasedhmc_rmvnorm_cholesky, 3},
    {"_debiasedhmc_dmvnorm", (DL_FUNC) &_debiasedhmc_dmvnorm, 3},
    {"_debiasedhmc_dmvnorm_cholesky_inverse", (DL_FUNC) &_debiasedhmc_dmvnorm_cholesky_inverse, 3},
    {"_debiasedhmc_rtmg", (DL_FUNC) &_debiasedhmc_rtmg, 8},
    {"_debiasedhmc_rtmg_coupled", (DL_FUNC) &_debiasedhmc_rtmg_coupled, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_debiasedhmc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
